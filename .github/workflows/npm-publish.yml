name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci

  bump-version:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Get branch name
        id: get_branch
        run: echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: Get current version
        id: get_version
        run: |
          # Obtener el último tag de la rama actual que siga el patrón de versión
          LAST_VERSION=$(git tag --list "${BRANCH_NAME}-*" --sort=-v:refname | head -n 1 | grep -o '[0-9]\+$')
          # Si no hay versiones previas, iniciar en 0
          if [ -z "$LAST_VERSION" ]; then
            NEW_VERSION=1
          else
            NEW_VERSION=$((LAST_VERSION + 1))
          fi
          # Combinar el nombre de la rama y el nuevo número de versión
          FULL_VERSION="${BRANCH_NAME}-${NEW_VERSION}"
          echo "VERSION=$FULL_VERSION" >> $GITHUB_ENV

      - name: Bump version
        run: |
          # Establecer la nueva versión en el package.json sin crear un tag de Git
          npm version "$VERSION" --no-git-tag-version
          # Crear un tag opcional para mantener el control de versiones en la rama
          git tag "$VERSION"
          git push origin "$VERSION"

  publish-npm:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
