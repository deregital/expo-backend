generator toDist {
  output   = "../dist/types/prisma-schema"
  provider = "prisma-client-js"
}

generator client {
  output   = "../types/prisma-schema"
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Account {
  id       String @id @default(uuid())
  username String @unique
  password String
  role     Role   @default(USER)

  comments         Comment[] @relation("ACCOUNT_X_COMMENT")
  solvableComments Comment[] @relation("ACCOUNT_X_SOLVED_COMMENT")
  tags             Tag[]     @relation("ACCOUNT_X_TAG")

  globalFilter         Tag[]    @relation("GLOBAL_FILTER_X_ACCOUNT")
  isGlobalFilterActive Boolean  @default(false) @map("is_global_filter_active")
  fcmToken             String[] @map("fcm_token")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("ACCOUNT")
}

enum Role {
  USER
  ADMIN
  FORM
}

model Profile {
  id      String @id @default(uuid())
  shortId Int    @map("short_id")

  phoneNumber          String    @unique @map("phone_number")
  secondaryPhoneNumber String?   @unique @map("secondary_phone_number")
  fullName             String    @map("full_name")
  firstName            String?   @map("first_name")
  gender               String?
  birthDate            DateTime? @map("birth_date")
  profilePictureUrl    String?   @map("profile_picture_url")
  instagram            String?
  mail                 String?
  dni                  String?
  alternativeNames     String[]  @map("alternative_names")

  comments Comment[] @relation("PROFILE_X_COMMENT")
  messages Message[] @relation("PROFILE_X_MESSAGE")
  tags     Tag[]     @relation("PROFILE_X_TAG")

  birthLocationId String?   @map("birth_location_id")
  birthLocation   Location? @relation("PROFILE_X_BIRTH_LOCATION", fields: [birthLocationId], references: [id])

  residenceLocationId String?   @map("residence_location_id")
  residenceLocation   Location? @relation("PROFILE_X_RESIDENCE_LOCATION", fields: [residenceLocationId], references: [id])

  isInTrash        Boolean   @default(false) @map("is_in_trash")
  movedToTrashDate DateTime? @map("moved_to_trash_date")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("PROFILE")
}

model Location {
  id        String @id @default(uuid())
  latitude  Float
  longitude Float
  country   String
  state     String
  city      String

  birthProfiles     Profile[] @relation("PROFILE_X_BIRTH_LOCATION")
  residenceProfiles Profile[] @relation("PROFILE_X_RESIDENCE_LOCATION")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([latitude, longitude])
  @@map("LOCATION")
}

model Comment {
  id      String @id @default(uuid())
  content String

  createdBy String  @map("created_by")
  account   Account @relation("ACCOUNT_X_COMMENT", fields: [createdBy], references: [id])

  profileId String  @map("perfil_id")
  profile   Profile @relation("PROFILE_X_COMMENT", fields: [profileId], references: [id], onDelete: Cascade)

  isSolvable Boolean   @default(false) @map("is_solvable")
  isSolved   Boolean   @default(false) @map("is_solved")
  solvedAt   DateTime? @map("solved_at")

  solvedById String?  @map("solved_by")
  solvedBy   Account? @relation("ACCOUNT_X_SOLVED_COMMENT", fields: [solvedById], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("COMMENT")
}

model Tag {
  id   String  @id @default(uuid())
  name String
  type TagType @default(PROFILE)

  groupId String   @map("group_id")
  group   TagGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  assistedEvent  Event? @relation("EVENT_X_TAG_ASISTED")
  confirmedEvent Event? @relation("EVENT_X_TAG_CONFIRMED")

  accounts             Account[] @relation("ACCOUNT_X_TAG")
  profiles             Profile[] @relation("PROFILE_X_TAG")
  accountsGlobalFilter Account[] @relation("GLOBAL_FILTER_X_ACCOUNT")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("TAG")
}

model TagGroup {
  id          String  @id @default(uuid())
  name        String
  color       String
  isExclusive Boolean @map("is_exclusive")
  tags        Tag[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("TAG_GROUP")
}

model Event {
  id       String   @id @default(uuid())
  name     String
  date     DateTime
  location String

  folderId String?      @map("folder_id")
  folder   EventFolder? @relation("EVENT_FOLDER_X_EVENT", fields: [folderId], references: [id], onDelete: Cascade)

  tagAssistedId String @unique @map("tag_assisted")
  tagAssisted   Tag    @relation("EVENT_X_TAG_ASISTED", fields: [tagAssistedId], references: [id])

  tagConfirmedId String @unique @map("tag_confirmed")
  tagConfirmed   Tag    @relation("EVENT_X_TAG_CONFIRMED", fields: [tagConfirmedId], references: [id])

  supraEventId String? @map("supra_event_id")
  supraEvent   Event?  @relation("SubEvents", fields: [supraEventId], references: [id], onDelete: Cascade)

  subEvents Event[] @relation("SubEvents")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("EVENT")
}

model EventFolder {
  id     String  @id @default(uuid())
  name   String
  color  String
  events Event[] @relation("EVENT_FOLDER_X_EVENT")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("EVENT_FOLDER")
}

model Message {
  id      String @id @default(uuid())
  wamId   String @unique @map("wam_id")
  message Json   @db.JsonB

  profilePhoneNumber String  @map("profile_phone_number")
  profile            Profile @relation("PROFILE_X_MESSAGE", fields: [profilePhoneNumber], references: [phoneNumber], onDelete: Cascade)

  state MessageState @default(SENT)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("MESSAGE")
}

model CannedResponse {
  id      String @id @default(uuid())
  name    String
  content String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("CANNED_RESPONSE")
}

model Enums {
  id               String           @id
  templateStatus   TemplateStatus
  templateCategory TemplateCategory
}

enum TemplateStatus {
  APPROVED
  PENDING
  REJECTED
}

enum TemplateCategory {
  MARKETING
  UTILITY
  AUTHENTICATION
}

enum TagType {
  PROFILE
  EVENT
  PARTICIPANT
  NOT_IN_SYSTEM
}

enum MessageState {
  SENT
  RECEIVED
  SEEN
}
