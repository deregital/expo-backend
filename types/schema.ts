/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AuthController_loginAccount'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AuthController_refreshToken'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['TagController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TagController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/find-by-group/{groupId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TagController_findByGroup'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TagController_findById'];
    put?: never;
    post?: never;
    delete: operations['TagController_remove'];
    options?: never;
    head?: never;
    patch: operations['TagController_update'];
    trace?: never;
  };
  '/tag/massive-allocation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['TagController_massiveAllocation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/massive-deallocation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['TagController_massiveDeallocation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/account/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AccountController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/account/global-filter': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AccountController_getGlobalFilter'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['AccountController_updateGlobalFilter'];
    trace?: never;
  };
  '/account/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AccountController_getMe'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag-group/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['TagGroupController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag-group/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TagGroupController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag-group/all-with-tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TagGroupController_findAllWithTags'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag-group/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TagGroupController_findById'];
    put?: never;
    post?: never;
    delete: operations['TagGroupController_delete'];
    options?: never;
    head?: never;
    patch: operations['TagGroupController_update'];
    trace?: never;
  };
  '/comment/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['CommentController_createComment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comment/get-by-profile/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['CommentController_getCommentsByProfileId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comment/toggle-solve/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['CommentController_toggleSolveComment'];
    trace?: never;
  };
  '/location/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/location/arg-states': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_findArgStates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/location/find-cities-by-arg-state/{argState}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_findCitiesByArgState'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/location/all-countries': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_findAllCountries'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/location/states-by-country/{countryCode}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_findStatesByCountry'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/canned-response/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['CannedResponseController_createCannedResponse'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/canned-response/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['CannedResponseController_getAllCannedResponses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/canned-response/update/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['CannedResponseController_updateCannedResponse'];
    trace?: never;
  };
  '/canned-response/delete/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['CannedResponseController_deleteCannedResponse'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event-folder/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['EventFolderController_createEventFolder'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event-folder/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['EventFolderController_getAllEventFolders'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event-folder/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['EventFolderController_getEventFolderById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event-folder/update/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['EventFolderController_updateEventFolder'];
    trace?: never;
  };
  '/event-folder/delete/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['EventFolderController_deleteEventFolder'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['EventController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['EventController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event/find-active': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['EventController_getActive'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/event/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['EventController_findById'];
    put?: never;
    post?: never;
    delete: operations['EventController_remove'];
    options?: never;
    head?: never;
    patch: operations['EventController_update'];
    trace?: never;
  };
  '/event/toggle-active/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['EventController_toggleActive'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/all-with-active-chat': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findAllWithActiveChat'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/find-by-tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findByTag'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/find-by-tag-groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findByTagGroups'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/find-by-date-range': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findByDateRange'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/find-by-phone-number/{phoneNumber}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findByPhoneNumber'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/find-trash': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findTrashCan'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['ProfileController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/profile/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProfileController_findById'];
    put?: never;
    post?: never;
    delete: operations['ProfileController_delete'];
    options?: never;
    head?: never;
    patch: operations['ProfileController_update'];
    trace?: never;
  };
  '/image/update/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['ImageController_updateImage'];
    trace?: never;
  };
  '/image/delete/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['ImageController_deleteImage'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/csv/download-profiles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['CsvController_downloadProfiles'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/csv/download-all-tables': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['CsvController_downloadAllTables'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/create-template': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MessageController_createTemplate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/templates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MessageController_findTemplates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/template/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MessageController_findTemplateById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/template/{metaId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['MessageController_deleteTemplate'];
    options?: never;
    head?: never;
    patch: operations['MessageController_updateTemplate'];
    trace?: never;
  };
  '/message/send-message-to-phone': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MessageController_sendMessageToPhone'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/send-template-to-tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MessageController_sendTemplateToTags'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/find-messages-by-phone/{phone}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MessageController_findMessagesByPhone'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/read-messages/{phone}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MessageController_readMessages'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/non-read-messages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MessageController_nonReadMessages'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/last-message-timestamp/{phone}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MessageController_getLastMessageTimestamp'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['TicketController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TicketController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/find-by-id/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TicketController_findById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/find-by-mail/{mail}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TicketController_findByMail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/find-by-event/{eventId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TicketController_findByEvent'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/find-by-profile-id/{profileId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TicketController_findByProfileId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/update/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['TicketController_update'];
    trace?: never;
  };
  '/ticket/delete/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['TicketController_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/generate-pdf/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TicketController_generatePdf'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/find-ticket/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TicketController_findTicket'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ticket/send-email/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['TicketController_sendEmail'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/webhook': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['WebhookController_verify'];
    put?: never;
    post: operations['WebhookController_receiveMessage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/otp/send': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['OtpController_sendOtp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/otp/verify': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['OtpController_verifyOtp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/mi-expo/login-with-phone': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MiExpoController_loginWithPhone'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/mi-expo/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MiExpoController_me'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['MiExpoController_updateMe'];
    trace?: never;
  };
  '/mi-expo/invitations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MiExpoController_invitations'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/mi-expo/tickets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MiExpoController_tickets'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/mi-expo/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MiExpoController_loginUsernamePassword'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    LoginDto: {
      username: string;
      password: string;
    };
    LoginResponseDto: {
      user: {
        /** Format: uuid */
        id: string;
        username: string;
        /** @enum {string} */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        /** @default false */
        isGlobalFilterActive: boolean;
        /** @default [] */
        fcmToken: string[];
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      };
      backendTokens: {
        accessToken: string;
        refreshToken: string;
        expiresIn: number;
      };
    };
    ErrorDto: {
      message: string[];
      statusCode: number;
      error: string;
    };
    RefreshResponseDto: {
      refreshToken: string;
      accessToken: string;
      expiresIn: number;
    };
    CreateTagDto: {
      name: string;
      /** Format: uuid */
      groupId: string;
    };
    CreateTagResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      groupId: string;
      /** @enum {string} */
      type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
    };
    FindAllTagResponseDto: {
      tags: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        group: {
          /** Format: uuid */
          id: string;
          name: string;
          color: string;
          isExclusive: boolean;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        };
      }[];
    };
    FindByGroupTagResponseDto: {
      tags: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        group: {
          /** Format: uuid */
          id: string;
          name: string;
          color: string;
          isExclusive: boolean;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        };
      }[];
    };
    FindOneTagResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      groupId: string;
      /** @enum {string} */
      type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      group: {
        /** Format: uuid */
        id: string;
        name: string;
        color: string;
        isExclusive: boolean;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      };
    };
    UpdateTagDto: {
      name: string;
      /** Format: uuid */
      groupId: string;
    };
    UpdateTagResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      groupId: string;
      /** @enum {string} */
      type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    DeleteTagResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      groupId: string;
      /** @enum {string} */
      type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    MassiveAllocationDto: {
      tagIds: string[];
      profileIds: string[];
    };
    MassiveAllocationResponseDto: {
      profiles: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        password: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    MassiveDeallocationDto: {
      tagIds: string[];
      profileIds: string[];
    };
    MassiveDeallocationResponseDto: {
      profiles: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        password: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    CreateAccountDto: {
      username: string;
      password: string;
      /** @enum {string} */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
    };
    CreateAccountResponseDto: {
      /** Format: uuid */
      id: string;
      username: string;
      /** @enum {string} */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
      /** @default false */
      isGlobalFilterActive: boolean;
      /** @default [] */
      fcmToken: string[];
    };
    UpdateGlobalFilterDto: {
      /** @default false */
      active: boolean;
      tagsIds: string[];
    };
    UpdateGlobalFilterResponseDto: {
      /** Format: uuid */
      id: string;
      username: string;
      password: string;
      /** @enum {string} */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
      /** @default false */
      isGlobalFilterActive: boolean;
      /** @default [] */
      fcmToken: string[];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      globalFilter: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    GetGlobalFilterResponseDto: {
      /** @default false */
      isGlobalFilterActive: boolean;
      globalFilter: {
        /** Format: uuid */
        id: string;
        name: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        group: {
          /** Format: uuid */
          id: string;
          color: string;
          isExclusive: boolean;
        };
      }[];
    };
    GetMeResponseDto: {
      /** Format: uuid */
      id: string;
      username: string;
      /** @enum {string} */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
      /** @default false */
      isGlobalFilterActive: boolean;
      /** @default [] */
      fcmToken: string[];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      globalFilter: {
        /** Format: uuid */
        id: string;
        name: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        group: {
          /** Format: uuid */
          id: string;
          color: string;
          isExclusive: boolean;
        };
      }[];
      tags: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    CreateTagGroupDto: {
      color: string;
      name: string;
      isExclusive: boolean;
    };
    CreateTagGroupResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      isExclusive: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    FindAllTagGroupResponseDto: {
      tagGroups: {
        /** Format: uuid */
        id: string;
        name: string;
        color: string;
        isExclusive: boolean;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        tags: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: uuid */
          groupId: string;
          /** @enum {string} */
          type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        }[];
      }[];
    };
    FindAllWithTagsResponseDto: {
      groups: {
        /** Format: uuid */
        id: string;
        name: string;
        isExclusive: boolean;
        color: string;
        tags: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: uuid */
          groupId: string;
          /** @enum {string} */
          type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          _count: {
            profiles: number;
          };
        }[];
        _count: {
          tags: number;
        };
      }[];
    };
    FindOneTagGroupResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      isExclusive: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      tags: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    UpdateTagGroupDto: {
      name: string;
      color: string;
      isExclusive: boolean;
    };
    UpdateTagGroupResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      isExclusive: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    DeleteTagGroupResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      isExclusive: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    CreateCommentDto: {
      content: string;
      /** Format: uuid */
      profileId: string;
      /** @default false */
      isSolvable: boolean;
    };
    CreateCommentResponseDto: {
      /** Format: uuid */
      id: string;
      content: string;
      /** Format: uuid */
      createdBy: string;
      /** Format: uuid */
      profileId: string;
      /** @default false */
      isSolvable: boolean;
      /** @default false */
      isSolved: boolean;
      /** Format: date-time */
      solvedAt: string | null;
      /** Format: uuid */
      solvedBy?: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    GetByProfileCommentResponseDto: {
      comments: {
        /** Format: uuid */
        id: string;
        content: string;
        /** Format: uuid */
        createdBy: string;
        /** Format: uuid */
        profileId: string;
        /** @default false */
        isSolvable: boolean;
        /** @default false */
        isSolved: boolean;
        /** Format: date-time */
        solvedAt: string | null;
        /** Format: uuid */
        solvedBy?: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        account: {
          username: string;
        };
      }[];
    };
    ToggleSolveCommentResponseDto: {
      /** Format: uuid */
      id: string;
      content: string;
      /** Format: uuid */
      createdBy: string;
      /** Format: uuid */
      profileId: string;
      /** @default false */
      isSolvable: boolean;
      /** @default false */
      isSolved: boolean;
      /** Format: date-time */
      solvedAt: string | null;
      /** Format: uuid */
      solvedBy?: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    FindAllLocationResponseDto: {
      birthLocations: {
        city: string;
        longitude: number;
        latitude: number;
        _count: {
          birthProfiles: number;
        };
      }[];
      residenceLocations: {
        city: string;
        longitude: number;
        latitude: number;
        _count: {
          residenceProfiles: number;
        };
      }[];
    };
    FindArgStatesResponseDto: {
      states: string[];
    };
    FindCitiesByArgStateResponseDto: {
      cities: {
        id: string;
        name: string;
        centroid: {
          lon: number;
          lat: number;
        };
      }[];
    };
    FindAllCountriesResponseDto: {
      countries: {
        name: string;
        isoCode: string;
        latitude: number;
        longitude: number;
      }[];
    };
    FindAllStatesByCountryResponseDto: {
      states: {
        name: string;
        isoCode: string;
        countryCode: string;
        countryName: string;
        latitude?: string | null;
        longitude?: string | null;
      }[];
    };
    CreateCannedResponseDto: {
      name: string;
      content: string;
    };
    CreateCannedResponseResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      content: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    GetAllCannedResponseResponseDto: {
      cannedResponses: {
        /** Format: uuid */
        id: string;
        name: string;
        content: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    UpdateCannedResponseDto: {
      name: string;
      content: string;
    };
    UpdateCannedResponseResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      content: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    DeleteCannedResponseResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      content: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    CreateEventFolderDto: {
      name: string;
      color: string;
    };
    CreateEventFolderResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    GetAllEventFolderResponseDto: {
      folders: {
        /** Format: uuid */
        id: string;
        name: string;
        color: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        events: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: date-time */
          date: string;
          /** Format: date-time */
          startingDate: string;
          /** Format: date-time */
          endingDate: string;
          location: string;
          /** Format: uuid */
          folderId: string | null;
          /** Format: uuid */
          tagAssistedId: string;
          /** Format: uuid */
          tagConfirmedId: string;
          active: boolean;
          /** Format: uuid */
          supraEventId: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        }[];
      }[];
    };
    GetByIdEventFolderResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      events: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        location: string;
        /** Format: uuid */
        folderId: string | null;
        /** Format: uuid */
        tagAssistedId: string;
        /** Format: uuid */
        tagConfirmedId: string;
        active: boolean;
        /** Format: uuid */
        supraEventId: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    UpdateEventFolderDto: {
      name: string;
      color: string;
    };
    UpdateEventFolderResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    DeleteEventFolderResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    CreateEventDto: {
      name: string;
      /** Format: date-time */
      date: string;
      /** Format: date-time */
      startingDate: string;
      /** Format: date-time */
      endingDate: string;
      location: string;
      /** Format: uuid */
      folderId: string | null;
      subEvents?: {
        name: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        location: string;
      }[];
      tagsId: string[];
      eventTickets: {
        amount: number | null;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        price: number | null;
      }[];
    };
    CreateEventResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date-time */
      date: string;
      /** Format: date-time */
      startingDate: string;
      /** Format: date-time */
      endingDate: string;
      location: string;
      /** Format: uuid */
      folderId: string | null;
      /** Format: uuid */
      tagAssistedId: string;
      /** Format: uuid */
      tagConfirmedId: string;
      active: boolean;
      /** Format: uuid */
      supraEventId: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    GetAllEventsResponseDto: {
      folders: {
        /** Format: uuid */
        id: string;
        name: string;
        color: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        events: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: date-time */
          date: string;
          /** Format: date-time */
          startingDate: string;
          /** Format: date-time */
          endingDate: string;
          location: string;
          /** Format: uuid */
          folderId: string | null;
          /** Format: uuid */
          tagAssistedId: string;
          /** Format: uuid */
          tagConfirmedId: string;
          active: boolean;
          /** Format: uuid */
          supraEventId: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          supraEvent: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            startingDate: string;
            /** Format: date-time */
            endingDate: string;
            location: string;
            /** Format: uuid */
            folderId: string | null;
            /** Format: uuid */
            tagAssistedId: string;
            /** Format: uuid */
            tagConfirmedId: string;
            active: boolean;
            /** Format: uuid */
            supraEventId: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
          } | null;
          subEvents: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: date-time */
            date: string;
            /** Format: date-time */
            startingDate: string;
            /** Format: date-time */
            endingDate: string;
            location: string;
            /** Format: uuid */
            folderId: string | null;
            /** Format: uuid */
            tagAssistedId: string;
            /** Format: uuid */
            tagConfirmedId: string;
            active: boolean;
            /** Format: uuid */
            supraEventId: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
          }[];
          tags: {
            /** Format: uuid */
            id: string;
            name: string;
            /** @enum {string} */
            type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
            group: {
              /** Format: uuid */
              id: string;
              color: string;
              name: string;
              isExclusive: boolean;
            };
          }[];
          eventTickets: {
            /** Format: uuid */
            id: string;
            amount: number | null;
            /** @enum {string} */
            type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
            price: number | null;
          }[];
        }[];
      }[];
      withoutFolder: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        location: string;
        /** Format: uuid */
        folderId: string | null;
        /** Format: uuid */
        tagAssistedId: string;
        /** Format: uuid */
        tagConfirmedId: string;
        active: boolean;
        /** Format: uuid */
        supraEventId: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        supraEvent: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: date-time */
          date: string;
          /** Format: date-time */
          startingDate: string;
          /** Format: date-time */
          endingDate: string;
          location: string;
          /** Format: uuid */
          folderId: string | null;
          /** Format: uuid */
          tagAssistedId: string;
          /** Format: uuid */
          tagConfirmedId: string;
          active: boolean;
          /** Format: uuid */
          supraEventId: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        } | null;
        subEvents: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: date-time */
          date: string;
          /** Format: date-time */
          startingDate: string;
          /** Format: date-time */
          endingDate: string;
          location: string;
          /** Format: uuid */
          folderId: string | null;
          /** Format: uuid */
          tagAssistedId: string;
          /** Format: uuid */
          tagConfirmedId: string;
          active: boolean;
          /** Format: uuid */
          supraEventId: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        }[];
        tags: {
          /** Format: uuid */
          id: string;
          name: string;
          /** @enum {string} */
          type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
          group: {
            /** Format: uuid */
            id: string;
            color: string;
            name: string;
            isExclusive: boolean;
          };
        }[];
        eventTickets: {
          /** Format: uuid */
          id: string;
          amount: number | null;
          /** @enum {string} */
          type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
          price: number | null;
        }[];
      }[];
    };
    GetActiveEventsResponseDto: {
      events: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        location: string;
        /** Format: uuid */
        folderId: string | null;
        /** Format: uuid */
        tagAssistedId: string;
        /** Format: uuid */
        tagConfirmedId: string;
        active: boolean;
        /** Format: uuid */
        supraEventId: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        eventTickets: {
          /** Format: uuid */
          id: string;
          amount: number | null;
          /** @enum {string} */
          type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
          price: number | null;
        }[];
      }[];
    };
    GetByIdEventResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date-time */
      date: string;
      /** Format: date-time */
      startingDate: string;
      /** Format: date-time */
      endingDate: string;
      location: string;
      /** Format: uuid */
      folderId: string | null;
      /** Format: uuid */
      tagAssistedId: string;
      /** Format: uuid */
      tagConfirmedId: string;
      active: boolean;
      /** Format: uuid */
      supraEventId: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      subEvents: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        location: string;
        /** Format: uuid */
        folderId: string | null;
        /** Format: uuid */
        tagAssistedId: string;
        /** Format: uuid */
        tagConfirmedId: string;
        active: boolean;
        /** Format: uuid */
        supraEventId: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
      supraEvent: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        location: string;
        /** Format: uuid */
        folderId: string | null;
        /** Format: uuid */
        tagAssistedId: string;
        /** Format: uuid */
        tagConfirmedId: string;
        active: boolean;
        /** Format: uuid */
        supraEventId: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      } | null;
      eventTickets: {
        /** Format: uuid */
        id: string;
        amount: number | null;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        price: number | null;
      }[];
      tags: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        group: {
          /** Format: uuid */
          id: string;
          name: string;
          color: string;
          isExclusive: boolean;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        };
      }[];
      tickets: {
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        eventId: string;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        /** @enum {string} */
        status: 'BOOKED' | 'PAID' | 'FREE';
        fullName: string;
        /** Format: email */
        mail: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      }[];
    };
    UpdateEventDto: {
      name: string;
      /** Format: uuid */
      folderId: string | null;
      /** Format: date-time */
      date: string;
      location: string;
      /** Format: date-time */
      startingDate: string;
      /** Format: date-time */
      endingDate: string;
      tagsId: string[];
      subEvents: {
        name: string;
        location: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        id: string | '';
      }[];
      eventTickets: {
        amount: number | null;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        price: number | null;
      }[];
    };
    UpdateEventResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date-time */
      date: string;
      /** Format: date-time */
      startingDate: string;
      /** Format: date-time */
      endingDate: string;
      location: string;
      /** Format: uuid */
      folderId: string | null;
      /** Format: uuid */
      tagAssistedId: string;
      /** Format: uuid */
      tagConfirmedId: string;
      active: boolean;
      /** Format: uuid */
      supraEventId: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      tagAssisted: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        group: {
          /** Format: uuid */
          id: string;
          name: string;
          color: string;
          isExclusive: boolean;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        };
      };
      eventTickets: {
        /** Format: uuid */
        id: string;
        amount: number | null;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        price: number | null;
      }[];
    };
    DeleteEventResponseDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date-time */
      date: string;
      /** Format: date-time */
      startingDate: string;
      /** Format: date-time */
      endingDate: string;
      location: string;
      /** Format: uuid */
      folderId: string | null;
      /** Format: uuid */
      tagAssistedId: string;
      /** Format: uuid */
      tagConfirmedId: string;
      active: boolean;
      /** Format: uuid */
      supraEventId: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    FindAllProfileResponseDto: {
      profiles: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        password: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        tags: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: uuid */
          groupId: string;
          /** @enum {string} */
          type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          group: {
            color: string;
            isExclusive: boolean;
          };
        }[];
      }[];
    };
    FindWithActiveChatResponseDto: {
      profiles: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        password: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        tags: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: uuid */
          groupId: string;
          /** @enum {string} */
          type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        }[];
        inChat: boolean;
        messages: {
          /** @enum {string} */
          state: 'SENT' | 'RECEIVED' | 'SEEN';
          message:
            | {
                id: string;
                from?: string;
                to?: string;
                timestamp: string;
                text: {
                  body: string;
                };
                /** @enum {string} */
                type: 'text';
              }
            | {
                id: string;
                from?: string;
                to?: string;
                timestamp: string;
                templateName: string;
                /** @enum {string} */
                type: 'template';
              };
          /** Format: date-time */
          created_at: string;
        }[];
      }[];
    };
    FindByTagsProfileResponseDto: {
      profiles: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        password: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        tags: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: uuid */
          groupId: string;
          /** @enum {string} */
          type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          group: {
            isExclusive: boolean;
            name: string;
            color: string;
          };
        }[];
      }[];
    };
    FindByTagGroupsProfileResponseDto: {
      profiles: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        password: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        tags: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: uuid */
          groupId: string;
          /** @enum {string} */
          type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        }[];
      }[];
    };
    FindByDateRangeResponseDto: {
      [key: string]:
        | {
            /** Format: uuid */
            id: string;
            shortId: number;
            /**
             * @default MI_EXPO
             * @enum {string}
             */
            role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
            firstTimeMiExpo: boolean;
            username: string | null;
            password: string | null;
            phoneNumber: string;
            isPhoneVerified: boolean;
            secondaryPhoneNumber: string | null;
            fullName: string;
            firstName: string | null;
            gender: string | null;
            birthDate: string | null;
            /** Format: uri */
            profilePictureUrl: string | null;
            instagram: string | null;
            /** Format: email */
            mail: string | null;
            dni: string | null;
            alternativeNames: string[];
            /** Format: uuid */
            birthLocationId: string | null;
            /** Format: uuid */
            residenceLocationId: string | null;
            isInTrash: boolean;
            /** Format: date-time */
            movedToTrashDate: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            tags: {
              /** Format: uuid */
              id: string;
              name: string;
              /** Format: uuid */
              groupId: string;
              /** @enum {string} */
              type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              updated_at: string;
              group: {
                /** Format: uuid */
                id: string;
              };
            }[];
          }[]
        | undefined;
    };
    FindByPhoneNumberResponseDto: {
      /** Format: uuid */
      id: string;
      shortId: number;
      /**
       * @default MI_EXPO
       * @enum {string}
       */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
      firstTimeMiExpo: boolean;
      username: string | null;
      password: string | null;
      phoneNumber: string;
      isPhoneVerified: boolean;
      secondaryPhoneNumber: string | null;
      fullName: string;
      firstName: string | null;
      gender: string | null;
      birthDate: string | null;
      /** Format: uri */
      profilePictureUrl: string | null;
      instagram: string | null;
      /** Format: email */
      mail: string | null;
      dni: string | null;
      alternativeNames: string[];
      /** Format: uuid */
      birthLocationId: string | null;
      /** Format: uuid */
      residenceLocationId: string | null;
      isInTrash: boolean;
      /** Format: date-time */
      movedToTrashDate: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    FindTrashResponseDto: {
      profiles: {
        /** Format: uuid */
        id: string;
        fullName: string;
        /** Format: uri */
        profilePictureUrl: string | null;
        /** Format: date-time */
        created_at: string;
        isInTrash: boolean;
        phoneNumber: string;
        /** Format: date-time */
        movedToTrashDate: string | null;
      }[];
    };
    CreateProfileDto: {
      profile: {
        alternativeNames: string[];
        birthDate: string | null;
        dni: string | null;
        fullName: string;
        gender: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        phoneNumber: string;
        /** Format: uri */
        profilePictureUrl: string | null;
        secondaryPhoneNumber: string | null;
        username: string | null;
        password: string | null;
        comments?: {
          content: string;
          /** @default false */
          isSolvable: boolean;
        }[];
        residence?: {
          city: string;
          country: string;
          latitude: number;
          longitude: number;
          state: string;
        };
        birth?: {
          city: string;
          country: string;
          latitude: number;
          longitude: number;
          state: string;
        };
        tags?: string[];
      };
      checkForSimilarity?: boolean;
    };
    CreateProfileResponseDto: {
      response:
        | {
            similarProfiles: {
              profile: {
                fullName: string;
                phoneNumber: string;
                /** Format: uuid */
                id: string;
              };
              similarityPhoneNumberPercentage: number;
              similarityFullNamePercentage: number;
            }[];
            /** @enum {string} */
            type: 'similar';
          }
        | {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            type: 'created';
          };
    };
    FindByIdProfileResponseDto: {
      /** Format: uuid */
      id: string;
      shortId: number;
      /**
       * @default MI_EXPO
       * @enum {string}
       */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
      firstTimeMiExpo: boolean;
      username: string | null;
      phoneNumber: string;
      isPhoneVerified: boolean;
      secondaryPhoneNumber: string | null;
      fullName: string;
      firstName: string | null;
      gender: string | null;
      birthDate: string | null;
      /** Format: uri */
      profilePictureUrl: string | null;
      instagram: string | null;
      /** Format: email */
      mail: string | null;
      dni: string | null;
      alternativeNames: string[];
      /** Format: uuid */
      birthLocationId: string | null;
      /** Format: uuid */
      residenceLocationId: string | null;
      isInTrash: boolean;
      /** Format: date-time */
      movedToTrashDate: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      residenceLocation: {
        /** Format: uuid */
        id: string;
        latitude: number;
        longitude: number;
        country: string;
        state: string;
        city: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      } | null;
      birthLocation: {
        /** Format: uuid */
        id: string;
        latitude: number;
        longitude: number;
        country: string;
        state: string;
        city: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      } | null;
      tags: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: uuid */
        groupId: string;
        /** @enum {string} */
        type: 'PROFILE' | 'EVENT' | 'PARTICIPANT' | 'NOT_IN_SYSTEM';
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        group: {
          /** Format: uuid */
          id: string;
          color: string;
          isExclusive: boolean;
        };
      }[];
    };
    DeleteProfileResponseDto: {
      /** Format: uuid */
      id: string;
      shortId: number;
      /**
       * @default MI_EXPO
       * @enum {string}
       */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
      firstTimeMiExpo: boolean;
      username: string | null;
      password: string | null;
      phoneNumber: string;
      isPhoneVerified: boolean;
      secondaryPhoneNumber: string | null;
      fullName: string;
      firstName: string | null;
      gender: string | null;
      birthDate: string | null;
      /** Format: uri */
      profilePictureUrl: string | null;
      instagram: string | null;
      /** Format: email */
      mail: string | null;
      dni: string | null;
      alternativeNames: string[];
      /** Format: uuid */
      birthLocationId: string | null;
      /** Format: uuid */
      residenceLocationId: string | null;
      isInTrash: boolean;
      /** Format: date-time */
      movedToTrashDate: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    UpdateProfileDto: {
      alternativeNames?: string[];
      birthDate?: string | null;
      dni?: string | null;
      fullName?: string;
      gender?: string | null;
      instagram?: string | null;
      /** Format: email */
      mail?: string | null;
      phoneNumber?: string;
      /** Format: uri */
      profilePictureUrl?: string | null;
      secondaryPhoneNumber?: string | null;
      isInTrash?: boolean;
      /** Format: date-time */
      movedToTrashDate?: string | null;
      username?: string | null;
      password?: string | null;
      firstTimeMiExpo?: boolean;
      residence?: {
        city: string;
        country: string;
        latitude: number;
        longitude: number;
        state: string;
      };
      birth?: {
        city: string;
        country: string;
        latitude: number;
        longitude: number;
        state: string;
      };
      tags?: string[];
    };
    UpdateImageDto: {
      /** Format: binary */
      image?: Record<string, never>;
    };
    UpdateImageResponseDto: {
      message: string;
    };
    DeleteImageResponseDto: {
      message: string;
    };
    DownloadProfilesDto: {
      password: string;
    };
    StreamableFile: Record<string, never>;
    DownloadAllTablesDto: {
      password: string;
    };
    Buffer: Record<string, never>;
    CreateTemplateDto: {
      name: string;
      content: string;
      buttons: string[];
    };
    CreateTemplateResponseDto: {
      message: string;
    };
    FindTemplatesResponseDto: {
      templates: {
        name: string;
        id: string;
        /** @enum {string} */
        status: 'APPROVED' | 'PENDING' | 'REJECTED';
      }[];
    };
    FindTemplateByIdResponseDto: {
      template: {
        name: string;
        language: string;
        /** @enum {string} */
        status: 'APPROVED' | 'PENDING' | 'REJECTED';
        id: string;
        /** @enum {string} */
        category: 'MARKETING' | 'UTILITY' | 'AUTHENTICATION';
        components: (
          | {
              /** @enum {string} */
              type: 'BODY';
              text: string;
            }
          | {
              /** @enum {string} */
              type: 'BUTTONS';
              buttons: {
                text: string;
                /** @enum {string} */
                type: 'QUICK_REPLY';
              }[];
            }
        )[];
      };
    };
    UpdateTemplateDto: {
      content: string;
      buttons: string[];
    };
    DeleteTemplateResponseDto: {
      success: boolean;
    };
    SendMessageToPhoneDto: {
      phone: string;
      message: string;
    };
    SendMessageToPhoneResponseDto: {
      success: boolean;
    };
    SendTemplateToTagsDto: {
      tags: string[];
      templateName: string;
    };
    SendTemplateToTagsResponseDto: {
      success: boolean;
    };
    FindMessagesByPhoneNumberResponseDto: {
      inChat: boolean;
      messages: {
        message:
          | {
              id: string;
              from?: string;
              to?: string;
              timestamp: string;
              text: {
                body: string;
              };
              /** @enum {string} */
              type: 'text';
            }
          | {
              id: string;
              from?: string;
              to?: string;
              timestamp: string;
              templateName: string;
              /** @enum {string} */
              type: 'template';
            };
        /** Format: date-time */
        created_at: string;
        /** @enum {string} */
        state: 'SENT' | 'RECEIVED' | 'SEEN';
      }[];
    };
    ReadMessagesResponseDto: {
      success: boolean;
    };
    NonReadMessagesDto: {
      messages: {
        profilePhoneNumber: string;
        _count: {
          id: number;
        };
      }[];
    };
    GetLastMessageTimestampResponseDto: {
      timestamp: number;
    };
    CreateTicketDto: {
      /** Format: uuid */
      eventId: string;
      /** @enum {string} */
      type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
      /** @enum {string} */
      status: 'BOOKED' | 'PAID' | 'FREE';
      fullName: string;
      /** Format: email */
      mail: string;
      /** Format: uuid */
      profileId?: string;
    };
    CreateTicketResponseDto: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      eventId: string;
      /** @enum {string} */
      type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
      /** @enum {string} */
      status: 'BOOKED' | 'PAID' | 'FREE';
      fullName: string;
      /** Format: email */
      mail: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      event: {
        /** Format: uuid */
        id: string;
        name: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        location: string;
        /** Format: uuid */
        folderId: string | null;
        /** Format: uuid */
        tagAssistedId: string;
        /** Format: uuid */
        tagConfirmedId: string;
        active: boolean;
        /** Format: uuid */
        supraEventId: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      };
    };
    FindAllTicketsResponseDto: {
      tickets: {
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        eventId: string;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        /** @enum {string} */
        status: 'BOOKED' | 'PAID' | 'FREE';
        fullName: string;
        /** Format: email */
        mail: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        event: {
          name: string;
          /** Format: date-time */
          date: string;
          location: string;
        };
      }[];
    };
    FindByIdTicketResponseDto: {
      ticket: {
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        eventId: string;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        /** @enum {string} */
        status: 'BOOKED' | 'PAID' | 'FREE';
        fullName: string;
        /** Format: email */
        mail: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        event: {
          name: string;
          /** Format: date-time */
          date: string;
          location: string;
        };
        profile: {
          /** Format: uuid */
          id: string;
          shortId: number;
          /**
           * @default MI_EXPO
           * @enum {string}
           */
          role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
          firstTimeMiExpo: boolean;
          username: string | null;
          password: string | null;
          phoneNumber: string;
          isPhoneVerified: boolean;
          secondaryPhoneNumber: string | null;
          fullName: string;
          firstName: string | null;
          gender: string | null;
          birthDate: string | null;
          /** Format: uri */
          profilePictureUrl: string | null;
          instagram: string | null;
          /** Format: email */
          mail: string | null;
          dni: string | null;
          alternativeNames: string[];
          /** Format: uuid */
          birthLocationId: string | null;
          /** Format: uuid */
          residenceLocationId: string | null;
          isInTrash: boolean;
          /** Format: date-time */
          movedToTrashDate: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        } | null;
      };
    };
    FindByMailTicketResponseDto: {
      tickets: {
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        eventId: string;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        /** @enum {string} */
        status: 'BOOKED' | 'PAID' | 'FREE';
        fullName: string;
        /** Format: email */
        mail: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        event: {
          name: string;
          /** Format: date-time */
          date: string;
          location: string;
        };
        profile: {
          /** Format: uuid */
          id: string;
          shortId: number;
          /**
           * @default MI_EXPO
           * @enum {string}
           */
          role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
          firstTimeMiExpo: boolean;
          username: string | null;
          password: string | null;
          phoneNumber: string;
          isPhoneVerified: boolean;
          secondaryPhoneNumber: string | null;
          fullName: string;
          firstName: string | null;
          gender: string | null;
          birthDate: string | null;
          /** Format: uri */
          profilePictureUrl: string | null;
          instagram: string | null;
          /** Format: email */
          mail: string | null;
          dni: string | null;
          alternativeNames: string[];
          /** Format: uuid */
          birthLocationId: string | null;
          /** Format: uuid */
          residenceLocationId: string | null;
          isInTrash: boolean;
          /** Format: date-time */
          movedToTrashDate: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        } | null;
      }[];
    };
    FindByEventTicketResponseDto: {
      tickets: {
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        eventId: string;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        /** @enum {string} */
        status: 'BOOKED' | 'PAID' | 'FREE';
        fullName: string;
        /** Format: email */
        mail: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        event: {
          name: string;
          /** Format: date-time */
          date: string;
          location: string;
        };
        profile: {
          /** Format: uuid */
          id: string;
          shortId: number;
          /**
           * @default MI_EXPO
           * @enum {string}
           */
          role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
          firstTimeMiExpo: boolean;
          username: string | null;
          password: string | null;
          phoneNumber: string;
          isPhoneVerified: boolean;
          secondaryPhoneNumber: string | null;
          fullName: string;
          firstName: string | null;
          gender: string | null;
          birthDate: string | null;
          /** Format: uri */
          profilePictureUrl: string | null;
          instagram: string | null;
          /** Format: email */
          mail: string | null;
          dni: string | null;
          alternativeNames: string[];
          /** Format: uuid */
          birthLocationId: string | null;
          /** Format: uuid */
          residenceLocationId: string | null;
          isInTrash: boolean;
          /** Format: date-time */
          movedToTrashDate: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        } | null;
      }[];
    };
    FindByProfileIdTicketResponseDto: {
      tickets: {
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        eventId: string;
        /** @enum {string} */
        type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
        /** @enum {string} */
        status: 'BOOKED' | 'PAID' | 'FREE';
        fullName: string;
        /** Format: email */
        mail: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        event: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: date-time */
          date: string;
          /** Format: date-time */
          startingDate: string;
          /** Format: date-time */
          endingDate: string;
          location: string;
          /** Format: uuid */
          folderId: string | null;
          /** Format: uuid */
          tagAssistedId: string;
          /** Format: uuid */
          tagConfirmedId: string;
          active: boolean;
          /** Format: uuid */
          supraEventId: string | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        };
      }[];
    };
    UpdateTicketDto: {
      /** @enum {string} */
      type?: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
      /** @enum {string} */
      status?: 'BOOKED' | 'PAID' | 'FREE';
      fullName?: string;
      /** Format: email */
      mail?: string;
    };
    UpdateTicketResponseDto: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      eventId: string;
      /** @enum {string} */
      type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
      /** @enum {string} */
      status: 'BOOKED' | 'PAID' | 'FREE';
      fullName: string;
      /** Format: email */
      mail: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    DeleteTicketResponseDto: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      eventId: string;
      /** @enum {string} */
      type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
      /** @enum {string} */
      status: 'BOOKED' | 'PAID' | 'FREE';
      fullName: string;
      /** Format: email */
      mail: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    FindTicketResponseDto: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      eventId: string;
      /** @enum {string} */
      type: 'PARTICIPANT' | 'STAFF' | 'SPECTATOR';
      /** @enum {string} */
      status: 'BOOKED' | 'PAID' | 'FREE';
      fullName: string;
      /** Format: email */
      mail: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    SendEmailResponseDto: {
      mailId: string;
    };
    SendOtpDto: {
      phoneNumber: string;
    };
    SendOtpResponseDto: {
      response:
        | {
            hasVerified: boolean;
            hasUsername: boolean;
            /** @enum {boolean} */
            success: true;
          }
        | {
            hasVerified: boolean;
            hasUsername: boolean;
            /** @enum {boolean} */
            success: false;
            message: string;
          };
    };
    VerifyOtpDto: {
      phoneNumber: string;
      code: string;
    };
    VerifyOtpResponseDto: {
      success: boolean;
      profile: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        password: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
        residenceLocation: {
          city: string;
          country: string;
          latitude: number;
          longitude: number;
        } | null;
        birthLocation: {
          city: string;
          country: string;
          latitude: number;
          longitude: number;
        } | null;
      };
    };
    LoginWithPhoneDto: {
      phoneNumber: string;
    };
    LoginWithPhoneResponseDto: {
      tokens: {
        accessToken: string;
        refreshToken: string;
        expiresIn: number;
      };
      profile: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      };
    };
    GetMiExpoMeResponseDto: {
      /** Format: uuid */
      id: string;
      shortId: number;
      /**
       * @default MI_EXPO
       * @enum {string}
       */
      role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
      firstTimeMiExpo: boolean;
      username: string | null;
      phoneNumber: string;
      isPhoneVerified: boolean;
      secondaryPhoneNumber: string | null;
      fullName: string;
      firstName: string | null;
      gender: string | null;
      birthDate: string | null;
      /** Format: uri */
      profilePictureUrl: string | null;
      instagram: string | null;
      /** Format: email */
      mail: string | null;
      dni: string | null;
      alternativeNames: string[];
      /** Format: uuid */
      birthLocationId: string | null;
      /** Format: uuid */
      residenceLocationId: string | null;
      isInTrash: boolean;
      /** Format: date-time */
      movedToTrashDate: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      residenceLocation: {
        /** Format: uuid */
        id: string;
        latitude: number;
        longitude: number;
        country: string;
        state: string;
        city: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      } | null;
      birthLocation: {
        /** Format: uuid */
        id: string;
        latitude: number;
        longitude: number;
        country: string;
        state: string;
        city: string;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      } | null;
    };
    UpdateMiExpoMeDto: {
      birthDate: string | null;
      dni: string | null;
      fullName: string;
      gender: string | null;
      instagram: string | null;
      /** Format: email */
      mail: string | null;
      password: string | null;
      phoneNumber: string;
      secondaryPhoneNumber: string | null;
      username: string | null;
      birth: {
        city: string;
        country: string;
        latitude: number;
        longitude: number;
        state: string;
      };
      residence: {
        city: string;
        country: string;
        latitude: number;
        longitude: number;
        state: string;
      };
    };
    GetInvitationsResponseDto: {
      events: {
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        startingDate: string;
        /** Format: date-time */
        endingDate: string;
        name: string;
        location: string;
        /** Format: uuid */
        id: string;
        active: boolean;
      }[];
    };
    LoginMiExpoDto: {
      username: string;
      password: string;
    };
    LoginMiExpoResponseDto: {
      user: {
        /** Format: uuid */
        id: string;
        shortId: number;
        /**
         * @default MI_EXPO
         * @enum {string}
         */
        role: 'USER' | 'ADMIN' | 'FORM' | 'MI_EXPO' | 'TICKETS';
        firstTimeMiExpo: boolean;
        username: string | null;
        phoneNumber: string;
        isPhoneVerified: boolean;
        secondaryPhoneNumber: string | null;
        fullName: string;
        firstName: string | null;
        gender: string | null;
        birthDate: string | null;
        /** Format: uri */
        profilePictureUrl: string | null;
        instagram: string | null;
        /** Format: email */
        mail: string | null;
        dni: string | null;
        alternativeNames: string[];
        /** Format: uuid */
        birthLocationId: string | null;
        /** Format: uuid */
        residenceLocationId: string | null;
        isInTrash: boolean;
        /** Format: date-time */
        movedToTrashDate: string | null;
        /** Format: date-time */
        created_at: string;
        /** Format: date-time */
        updated_at: string;
      };
      backendTokens: {
        accessToken: string;
        refreshToken: string;
        expiresIn: number;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AuthController_loginAccount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto'];
      };
    };
    responses: {
      /** @description Sesión iniciada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResponseDto'];
        };
      };
      /** @description Credenciales inválidas */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  AuthController_refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token renovado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RefreshResponseDto'];
        };
      };
    };
  };
  TagController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTagDto'];
      };
    };
    responses: {
      /** @description Etiqueta creada con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateTagResponseDto'];
        };
      };
    };
  };
  TagController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiquetas obtenidas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllTagResponseDto'];
        };
      };
    };
  };
  TagController_findByGroup: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        groupId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiquetas obtenidas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByGroupTagResponseDto'];
        };
      };
      /** @description Grupo de etiquetas no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TagController_findById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiqueta obtenida */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindOneTagResponseDto'];
        };
      };
      /** @description Etiqueta no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TagController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiqueta no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Etiqueta eliminada */
      410: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteTagResponseDto'];
        };
      };
    };
  };
  TagController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTagDto'];
      };
    };
    responses: {
      /** @description Etiqueta actualizada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateTagResponseDto'];
        };
      };
      /** @description Etiqueta no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TagController_massiveAllocation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MassiveAllocationDto'];
      };
    };
    responses: {
      /** @description Etiquetas asignadas con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MassiveAllocationResponseDto'];
        };
      };
    };
  };
  TagController_massiveDeallocation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MassiveDeallocationDto'];
      };
    };
    responses: {
      /** @description Etiquetas desasignadas con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MassiveDeallocationResponseDto'];
        };
      };
    };
  };
  AccountController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAccountDto'];
      };
    };
    responses: {
      /** @description Cuenta creada con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateAccountResponseDto'];
        };
      };
    };
  };
  AccountController_getGlobalFilter: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Filtro base obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetGlobalFilterResponseDto'];
        };
      };
    };
  };
  AccountController_updateGlobalFilter: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGlobalFilterDto'];
      };
    };
    responses: {
      /** @description Filtro base actualizado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateGlobalFilterResponseDto'];
        };
      };
    };
  };
  AccountController_getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cuenta obtenida */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetMeResponseDto'];
        };
      };
    };
  };
  TagGroupController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTagGroupDto'];
      };
    };
    responses: {
      /** @description Grupo de etiquetas creado con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateTagGroupResponseDto'];
        };
      };
    };
  };
  TagGroupController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Grupos de etiquetas obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllTagGroupResponseDto'];
        };
      };
    };
  };
  TagGroupController_findAllWithTags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Etiquetas obtenidas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllWithTagsResponseDto'];
        };
      };
    };
  };
  TagGroupController_findById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Grupo de etiquetas obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindOneTagGroupResponseDto'];
        };
      };
      /** @description Grupo de etiquetas no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TagGroupController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Grupo de etiquetas eliminado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteTagGroupResponseDto'];
        };
      };
      /** @description Grupo de etiquetas no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TagGroupController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTagGroupDto'];
      };
    };
    responses: {
      /** @description Grupo de etiquetas actualizado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateTagGroupResponseDto'];
        };
      };
      /** @description Grupo de etiquetas no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  CommentController_createComment: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCommentDto'];
      };
    };
    responses: {
      /** @description Comentario creado con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateCommentResponseDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  CommentController_getCommentsByProfileId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Comentarios obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetByProfileCommentResponseDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  CommentController_toggleSolveComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cambio de estado en la resolución del comentario */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ToggleSolveCommentResponseDto'];
        };
      };
      /** @description Comentario no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description El comentario no es resoluble */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  LocationController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ubicaciones obtenidas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllLocationResponseDto'];
        };
      };
    };
  };
  LocationController_findArgStates: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Provincias de Argentina obtenidas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindArgStatesResponseDto'];
        };
      };
    };
  };
  LocationController_findCitiesByArgState: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        argState: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Localidades de Argentina obtenidas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindCitiesByArgStateResponseDto'];
        };
      };
      /** @description Provincia "[missing "{{argState}}" value]" no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  LocationController_findAllCountries: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Países obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllCountriesResponseDto'];
        };
      };
    };
  };
  LocationController_findStatesByCountry: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        countryCode: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Estados obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllStatesByCountryResponseDto'];
        };
      };
      /** @description País no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  CannedResponseController_createCannedResponse: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCannedResponseDto'];
      };
    };
    responses: {
      /** @description Respuesta enlatada creada con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateCannedResponseResponseDto'];
        };
      };
      /** @description Error en la creacion de la respuesta */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  CannedResponseController_getAllCannedResponses: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Respuestas enlatadas obtenidas con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetAllCannedResponseResponseDto'];
        };
      };
    };
  };
  CannedResponseController_updateCannedResponse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCannedResponseDto'];
      };
    };
    responses: {
      /** @description Respuesta enlatada actualizada con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateCannedResponseResponseDto'];
        };
      };
      /** @description Respuesta enlatada no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  CannedResponseController_deleteCannedResponse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Respuesta enlatada eliminada con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteCannedResponseResponseDto'];
        };
      };
      /** @description Respuesta enlatada no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventFolderController_createEventFolder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEventFolderDto'];
      };
    };
    responses: {
      /** @description Carpeta de evento creada con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateEventFolderResponseDto'];
        };
      };
      /** @description Error en la creación de la carpeta de evento */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventFolderController_getAllEventFolders: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Carpetas de evento obtenidas con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetAllEventFolderResponseDto'];
        };
      };
    };
  };
  EventFolderController_getEventFolderById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Carpeta de evento obtenida con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetByIdEventFolderResponseDto'];
        };
      };
      /** @description Carpeta de evento no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventFolderController_updateEventFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEventFolderDto'];
      };
    };
    responses: {
      /** @description Carpeta de evento actualizada con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateEventFolderResponseDto'];
        };
      };
      /** @description Carpeta de evento no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventFolderController_deleteEventFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Carpeta de evento eliminada con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteEventFolderResponseDto'];
        };
      };
      /** @description Carpeta de evento no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEventDto'];
      };
    };
    responses: {
      /** @description Evento creado con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateEventResponseDto'];
        };
      };
      /** @description Error en la creación del evento */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Eventos obtenidos con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetAllEventsResponseDto'];
        };
      };
      /** @description No se encontraron eventos */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventController_getActive: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Eventos obtenidos con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetActiveEventsResponseDto'];
        };
      };
    };
  };
  EventController_findById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Evento obtenido con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetByIdEventResponseDto'];
        };
      };
      /** @description Evento no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Evento no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Evento eliminado con éxito */
      410: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteEventResponseDto'];
        };
      };
    };
  };
  EventController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEventDto'];
      };
    };
    responses: {
      /** @description Evento actualizado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateEventResponseDto'];
        };
      };
      /** @description Evento no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Evento activo no editable */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  EventController_toggleActive: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Evento activo cambiado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateEventResponseDto'];
        };
      };
      /** @description Evento no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Evento activo no editable */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfiles obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllProfileResponseDto'];
        };
      };
    };
  };
  ProfileController_findAllWithActiveChat: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfiles obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindWithActiveChatResponseDto'];
        };
      };
    };
  };
  ProfileController_findByTag: {
    parameters: {
      query: {
        tags: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfiles obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByTagsProfileResponseDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_findByTagGroups: {
    parameters: {
      query: {
        tagGroups: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfiles obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByTagGroupsProfileResponseDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_findByDateRange: {
    parameters: {
      query: {
        from: string;
        to: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfiles obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByDateRangeResponseDto'];
        };
      };
      /** @description Fecha inválida */
      412: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_findByPhoneNumber: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        phoneNumber: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByPhoneNumberResponseDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_findTrashCan: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfiles obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindTrashResponseDto'];
        };
      };
    };
  };
  ProfileController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProfileDto'];
      };
    };
    responses: {
      /** @description Perfil creado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateProfileResponseDto'];
        };
      };
      /** @description No se encontró la etiqueta de participante */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Error en la creación del perfil */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_findById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByIdProfileResponseDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil eliminado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteProfileResponseDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ProfileController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProfileDto'];
      };
    };
    responses: {
      /** @description Perfil actualizado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateProfileDto'];
        };
      };
      /** @description Perfil no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Error en la actualización del perfil */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ImageController_updateImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UpdateImageDto'];
      };
    };
    responses: {
      /** @description Imagen actualizada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateImageResponseDto'];
        };
      };
      /** @description Conflicto al actualizar la imagen */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description La imagen no es válida, debe ser un archivo de imagen */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Error al subir la imagen al CDN */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  ImageController_deleteImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Imagen eliminada exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteImageResponseDto'];
        };
      };
      /** @description Perfil o foto no encontrados */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Error al eliminar la imagen del CDN */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  CsvController_downloadProfiles: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadProfilesDto'];
      };
    };
    responses: {
      /** @description No tienes autorización para descargar el archivo de modelos */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Error al descargar el archivo CSV de modelos */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description CSV de modelos descargado con éxito */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StreamableFile'];
        };
      };
    };
  };
  CsvController_downloadAllTables: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadAllTablesDto'];
      };
    };
    responses: {
      /** @description No tienes autorización para descargar todas las tablas */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description CSV de todas las tablas descargado con éxito */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Buffer'];
        };
      };
    };
  };
  MessageController_createTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTemplateDto'];
      };
    };
    responses: {
      /** @description Plantilla creada con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateTemplateResponseDto'];
        };
      };
    };
  };
  MessageController_findTemplates: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantillas encontradas */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindTemplatesResponseDto'];
        };
      };
    };
  };
  MessageController_findTemplateById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla encontrada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindTemplateByIdResponseDto'];
        };
      };
    };
  };
  MessageController_deleteTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        metaId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plantilla eliminada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteTemplateResponseDto'];
        };
      };
      /** @description Plantilla no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  MessageController_updateTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        metaId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTemplateDto'];
      };
    };
    responses: {
      /** @description Plantilla actualizada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateTemplateDto'];
        };
      };
      /** @description Plantilla no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  MessageController_sendMessageToPhone: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SendMessageToPhoneDto'];
      };
    };
    responses: {
      /** @description Mensaje enviado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SendMessageToPhoneResponseDto'];
        };
      };
      /** @description Error al enviar el mensaje */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  MessageController_sendTemplateToTags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SendTemplateToTagsDto'];
      };
    };
    responses: {
      /** @description Plantilla enviada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SendTemplateToTagsResponseDto'];
        };
      };
    };
  };
  MessageController_findMessagesByPhone: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        phone: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Mensajes encontrados */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindMessagesByPhoneNumberResponseDto'];
        };
      };
      /** @description No se encontró el perfil */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  MessageController_readMessages: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        phone: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Mensajes leídos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReadMessagesResponseDto'];
        };
      };
      /** @description Error al leer los mensajes */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  MessageController_nonReadMessages: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Mensajes no leídos encontrados */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NonReadMessagesDto'];
        };
      };
    };
  };
  MessageController_getLastMessageTimestamp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        phone: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Último mensaje obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetLastMessageTimestampResponseDto'];
        };
      };
    };
  };
  TicketController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTicketDto'];
      };
    };
    responses: {
      /** @description Ticket creado con éxito */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateTicketResponseDto'];
        };
      };
      /** @description Evento no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description No se pueden emitir más tickets para este evento */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tickets obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindAllTicketsResponseDto'];
        };
      };
    };
  };
  TicketController_findById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ticket obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByIdTicketResponseDto'];
        };
      };
      /** @description Ticket no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_findByMail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mail: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tickets por mail obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByMailTicketResponseDto'];
        };
      };
    };
  };
  TicketController_findByEvent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        eventId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tickets por evento obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByEventTicketResponseDto'];
        };
      };
      /** @description Tickets por evento no encontrados */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_findByProfileId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profileId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ticket obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByProfileIdTicketResponseDto'];
        };
      };
      /** @description Ticket no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTicketDto'];
      };
    };
    responses: {
      /** @description Ticket actualizado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateTicketResponseDto'];
        };
      };
      /** @description Ticket no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ticket eliminado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DeleteTicketResponseDto'];
        };
      };
      /** @description Ticket no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_generatePdf: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ticket generado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Buffer'];
        };
      };
      /** @description Ticket no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_findTicket: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ticket encontrado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindTicketResponseDto'];
        };
      };
      /** @description Ticket no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Error de formato en el valor del código de barras */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Error al descifrar el ID del ticket */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  TicketController_sendEmail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Email enviado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SendEmailResponseDto'];
        };
      };
      /** @description No estás autorizado para enviar email para este ticket */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description Ticket no encontrado */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  WebhookController_verify: {
    parameters: {
      query: {
        'hub.mode': string;
        'hub.verify_token': string;
        'hub.challenge': string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Webhook verificado */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description Solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Prohibido */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  WebhookController_receiveMessage: {
    parameters: {
      query?: never;
      header: {
        'x-hub-signature-256': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OtpController_sendOtp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SendOtpDto'];
      };
    };
    responses: {
      /** @description Código de verificación enviado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SendOtpResponseDto'];
        };
      };
      /** @description El teléfono ya fue verificado, por favor inicie sesión */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description No se encontró un perfil asociado al teléfono. Por favor registrate */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  OtpController_verifyOtp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['VerifyOtpDto'];
      };
    };
    responses: {
      /** @description Código de verificación verificado con éxito */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['VerifyOtpResponseDto'];
        };
      };
      /** @description El código de verificación expiró. Por favor solicita uno nuevo */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
      /** @description No se encontró un código de verificación */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  MiExpoController_loginWithPhone: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginWithPhoneDto'];
      };
    };
    responses: {
      /** @description Sesión iniciada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginWithPhoneResponseDto'];
        };
      };
      /** @description Credenciales inválidas */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  MiExpoController_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Perfil obtenido */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetMiExpoMeResponseDto'];
        };
      };
    };
  };
  MiExpoController_updateMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMiExpoMeDto'];
      };
    };
    responses: {
      /** @description Me */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetMiExpoMeResponseDto'];
        };
      };
    };
  };
  MiExpoController_invitations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Eventos obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetInvitationsResponseDto'];
        };
      };
    };
  };
  MiExpoController_tickets: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tickets obtenidos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FindByProfileIdTicketResponseDto'];
        };
      };
    };
  };
  MiExpoController_loginUsernamePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginMiExpoDto'];
      };
    };
    responses: {
      /** @description Sesión iniciada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginMiExpoResponseDto'];
        };
      };
      /** @description Credenciales inválidas */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
}
